from fastapi import FastAPI, Request, UploadFile, File
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
import os
import pickle
import uuid
import time
import uvicorn

from treatments.indexB008_treatments import treatments

# Instanciation de la sous-librairie FastAPI
app = FastAPI()

# Instanciation du r√©pertoire et des fichiers HTML
templates = Jinja2Templates(directory='templates')

# R√©cup√©ration du fichier static et de ses fichiers CSS
app.mount('/static/', StaticFiles(directory='static'),name='static')

# Chemin absolu du dossier o√π se trouve ce script (c:\Users\LRCOM\Documents\...)
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Ajout du r√©pertoire data (...\Python\fastapi_test\app\data)
DATA_DIR = os.path.join(BASE_DIR, 'data')

# Cr√©ation du dossier 'data' s'il n'existe pas
os.makedirs(DATA_DIR, exist_ok=True)

# 1√®re page HTML : page par d√©faut
@app.get('/',
         response_class=HTMLResponse,
         summary="Page @ par d√©faut",
         description="""
         Page affichant le fichier √† r√©cup√©rer et √† charger le fichier Excel s√©lectionn√©
         """,
         )
def get_home(request: Request):
    return templates.TemplateResponse(
        'indexB008_home.html', # fichier HTML li√©
        {"request": request} # requ√™tes possibles directement sur le fichier HTML
    )

# 2√®me page HTML : Affecter un titre √† chaque civilit√©... sauf si erreur...
@app.post('/upload',
          response_class=HTMLResponse,
          summary='Table des civilit√©s et des titres √† affecter',
          description="""
          Page affichant une table comprenant les civilit√©s et les titres √† affecter
          
          arg import_file: chargement des donn√©es du fichier Excel
          """,
          )
async def post_upload(
    request: Request,
    import_file: UploadFile=File(...),
) -> None:
    
    # Assignation d'un nom du fichier charg√© et de son extension
    filename = import_file.filename
    
    # V√©rification que le fichier charg√© a une extension .xlsx
    if not filename.lower().endswith('.xlsx'):
        return templates.TemplateResponse(
            'indexB008_error.html', # fichier HMTL li√©
            {'request': request, # requ√™tes √† effectuer sur le fichier HTML
             'message': "‚ùå Le fichier doit √™tre au format .xlsx (Excel).",
             }
        )
    
    # Instruction asynchrone ci-apr√®s permettant de lire le fichier Excel en 
    # m√©moire (en mode binaire) sans bloquer l'application
    contents = await import_file.read()
    
    # Assignation d'un nom de fichier temporaire Excel
    input_path = 'temp_upload.xlsx'
    
    try:
        # Sauvegarde temporaire pour que les traitements polars
        # s'op√©rent sur ce fichier
        with open(input_path, 'wb') as f:
            f.write(contents)
            
        # R√©cup√©ration de la m√©thode treatments()
        # sur les traitements effectu√©s sur la DF
        civilities = treatments(input_path)
        
        # Suppression du fichier temporaire
        os.remove(input_path)
        
        # Assignation d'une liste de titres
        titles = ['Ma√Ætre', 'Seigneur', 'Esclave']
        
        return templates.TemplateResponse(
            'indexB008_formulaire.html', # fichier HTML li√©
            {'request': request, # requ√™tes √† effectuer sur le fichier HTML
             'civilites': civilities, # Colonne des civilit√©s
             'titres': titles, # Colonne des titres
             }
            )
    
    # Fichier invalide...
    except ValueError:
        return templates.TemplateResponse(
            'indexB008_error.html', # fichier HTML li√©
            {'request': request, # requ√™tes √† effectuer sur le fichier HTML
             'message': "‚ùå Le fichier charg√© n'est pas un fichier Excel valide. Veuillez r√©essayer..."
             }
        )
    
    # Erreur inattendue...
    except Exception as e:
        return templates.TemplateResponse(
            'indexB008_error.html', # fichier HTML li√©
            {'request': request, # requ√™tes √† effectuer sur le fichier HTML
             'message': f"‚ùå Une erreur est survenue : {str(e)}"
             }
        )

# 3√®me page HTML : R√©sultats des affectations
@app.post("/submit",
          response_class=HTMLResponse,
          summary="Affichage et t√©l√©chargement des titres affect√©s aux civilit√©s",
          description="""
          Page affichant les titres affect√©s aux civilit√©s + t√©l√©chargement des donn√©es sous format pickle
          """,)
async def post_submit(request: Request):
    
    # R√©cup√©ration de la table avec les civilit√©s et les titres rattach√©s
    form = await request.form()
    
    # Conversion en type dictionnaire
    results = dict(form)

    # Cr√©ation d'un identifiant unique sous la forme de caract√®res sous la forme :
    # 0c6b9a1e-f85b-42a6-bec7-b6cf37934cb0 -> impossible d'avoir 2 fois le m√™me
    unique_id = str(uuid.uuid4())
    
    # Assignation du nom de fichier avec la concat√©nation de l'identifiant ci-avant
    filename = f"civilite_titres_{unique_id}.pickle"
    
    # Assignation du chemin complet du fichier pickle (r√©pertoires + nom du fichier)
    filepath = os.path.join(DATA_DIR, filename)
    
    # üîÅ Nettoyage automatique : suppression des fichiers .pickle 
    # de plus d'1 heure
    now = time.time()
    expiration_seconds = 3600  # 1 heure
    
    # Pour chaque fichier dans le r√©pertoire cibl√© (/data)...
    for f in os.listdir(DATA_DIR):
        
        # Si le nom du fichier a pour terminaison .pickle...
        if f.endswith(".pickle"):
            
            # Assignation du chemin complet du fichier pickle 
            # (r√©pertoires + nom du fichier)
            full_path = os.path.join(DATA_DIR, f)
            
            try:
                # Si le fichier t√©l√©charg√© a un temps expir√©...
                if now - os.path.getmtime(full_path) > expiration_seconds:
                    
                    # Suppression du fichier .pickle
                    os.remove(full_path)
                    
            except Exception as e:
                print(f"Erreur lors de la suppression de {f} : {e}")  # log utile

    # Chargement des titres affect√©s aux civilit√©s dans un fichier pickle
    with open(filepath, "wb") as f:
        pickle.dump(results, f)

    return templates.TemplateResponse(
        "indexB008_results.html",
        {
            "request": request,
            "results": results,
            "download_link": f"/download/{filename}",
        }
    )

# 4√®me page HTML : t√©l√©chargements 
@app.get('/download/{filename}')
def download_pickle(filename: str):
    file_path = os.path.join(DATA_DIR, filename)

    if os.path.exists(file_path):
        return FileResponse(
            path=file_path,
            media_type='application/octet-stream',
            filename=filename
        )
    return HTMLResponse("‚ùå Fichier introuvable", status_code=404)

if __name__ == '__main__':
    uvicorn.run(app)
